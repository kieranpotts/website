/**
 * @file      Part of the Nirvarnia web application framework.
 * @see       {@link https://nirvarnia.com/|Nirvarnia}
 * @copyright 2020+ Kieran Potts Consultancy Ltd.
 * @license   Blue Oak Model License v1.0.0
 */

/**
 * Resets for input controls: hyperlinks, buttons, form fields, etc.
 *
 * @example
 *
 * TODO
 */

/* Set the default font for form fields and buttons. These may be inherited from
the document body. */

button,
input,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
}

/* Remove the default italics of <optgroup> labels. Instead make them bold. */

optgroup {
  font-style: normal;
  font-weight: var(--reset-default-font-weight-bold);

  & option {
    font-weight: var(--reset-default-font-weight-normal);
  }
}

/* For accessibility reasons, we maintain the underline on hyperlinks, though it
will be modified and even removed in many contexts, such as when an anchor wraps
an icon or is presented as a button. By default, links are not differentiated by
by color, however. */

a {
  color: inherit;
  outline: none;
  text-decoration: underline;
}

/* We enforce a consistent outline around elements in focus. The default outline
is hidden while a button or link is active. */

*:focus {
  outline-color: var(--reset-focus-outline-color);
  outline-style: solid;
  outline-width: var(--reset-focus-outline-width);
}

*:focus:active {
  outline-width: 0;
}

*[tabindex="-1"],
*[tabindex="-1"]:focus {
  outline: none;
}

/* All interactive elements, except disabled ones, when hovered over should show
the pointer cursor. */

a,
button,
details,
input[type="button"],
input[type="color"],
input[type="image"],
input[type="range"],
input[type="reset"],
input[type="submit"] {
  cursor: pointer;
}

button[disabled],
input[disabled],
select[disabled],
textarea[disabled] {
  cursor: default;
}

/* For the ultimate in accessibility, accesskeys, where relevant, can be visibly
rendered in the :::after pseudo element.  Remember also to describe accesskeys -
the title attribute is a good place for this. */

*[accesskey]::after {
  content: ' [' attr(accesskey) ']';
}

/* Remove the default border around fieldsets. When did you last see this? */

fieldset {
  border: 0;
}

/* Convert the <label> element from inline to block-level - this is how it tends
to be used. */

label {
  display: block;
}

/* Convert buttons and most input controls from inline to block, and get them to
fill the width of their container.  Default backgrounds and borders can be based
on the main text color. */

/* In Webkit on Mac, <select> boxes can fail to inherit some properties, if they
do not have any styling applied to them directly - a strange bug! Just setting a
background color or any other property is enough to eliminate this error. */

button,
input,
select,
textarea {
  background: transparent;
  border: 0;
  color: inherit;
  display: block;
  width: 100%;
}

select[multiple],
select[size] {
  height: auto;
}

input[type="color"] {
  display: inline-block;
  width: 60px;
}

input[type="image"] {
  display: inline-block;
  width: auto;
}

/* Turn off textarea resizing and set overflow to auto... doing this removes the
vertical scrollbar in IE6-9 when there is no overflow. We can change the default
height of textarea boxes; this can be adjusted on a case-by-case basis by adding
the rows attribute. */

textarea {
  min-height: 10em;
  overflow: auto;
  resize: none;
}

/* Internet Explorer versions 8 and 9 have the box-sizing property on radios and
checkboxes set to content-box, rather than border-box - the convention. There is
some excess padding applied in those browsers, too. */

input[type="checkbox"],
input[type="radio"] {
  border-sizing: border-box;
  display: inline-block;
  padding: 0;
  vertical-align: baseline;
  width: auto;
}

/* Buttons are not stylable in iOS by default, but that can be changed simply by
applying the appearance property. All browsers apply their own bespoke chrome to
search boxes; this can be removed in WebKit browsers. */

button {
  appearance: button;
}

input[type="search"] {
  appearance: textfield;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  appearance: none;
}

/* Firefox adds, for accessibility purposes, a small dotted border around button
and input controls that are in focus.  This causes unwanted padding, which makes
precision styling impossible. Happily, ::-moz-focus-inner offers a fix. */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border-width: 0;
  padding: 0;
}

/* Similar resets for <select> elements in Firefox: */

select:-moz-focusring,
select::-moz-focus-inner {
  color: transparent;
  text-shadow: 0 0 0 #000;
}

/* This is needed to remove the focus ring from range inputs in some old Firefox
releases. @see https://bugzilla.mozilla.org/show_bug.cgi?id=932410 */

input[type="range"]::-moz-focus-outer {
  border: 0;
}

/* Apply a consistent color for placeholder text. Firefox 19+ gives placeholders
an opacity of 0.54, which needs to be reset for cross-browser consistency. */

::placeholder {
  color: var(--reset-placeholder-text-color);
  opacity: 1;
}

/* Remove some non-standard <input type="password"> features from in IE10+. */

input::-ms-clear,
input::-ms-reveal {
  display: none;
}
